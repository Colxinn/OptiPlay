generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
<<<<<<< HEAD
  url      = env("DATABASE_URL")
}

// ---------- NEXT-AUTH (v5) tables ---------- 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isOwner       Boolean   @default(false)
  passwordHash  String?

  accounts Account[]
  sessions Session[]

  posts     Post[]
  comments  Comment[]
  votes     Vote[]
  pollVotes PollVote[]

  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- Forum / Poll basics ---------- 
=======
  url      = "postgresql://neondb_owner:npg_XVy3De2laJhn@ep-billowing-shadow-afxlj3vs-pooler.c-2.us-west-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
}


model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  isOwner   Boolean  @default(false)
  posts     Post[]
  comments  Comment[]
  votes     Vote[]
  createdAt DateTime @default(now())
}

>>>>>>> origin/main
model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
<<<<<<< HEAD
  isRemoved Boolean   @default(false)
  authorId  String?
  author    User?     @relation(fields: [authorId], references: [id])
=======
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
>>>>>>> origin/main
  comments  Comment[]
  votes     Vote[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
<<<<<<< HEAD
  isRemoved Boolean  @default(false)
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
=======
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
>>>>>>> origin/main
  createdAt DateTime @default(now())
}

model Vote {
<<<<<<< HEAD
  id        String   @id @default(cuid())
  value     Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Poll {
  id        String       @id @default(cuid())
  slug      String       @unique
  question  String
  game      String?
  startsAt  DateTime
  endsAt    DateTime
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  pollId String
  poll   Poll       @relation(fields: [pollId], references: [id])
  votes  PollVote[]
}

model PollVote {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  pollId    String
  poll      Poll       @relation(fields: [pollId], references: [id])
  optionId  String
  option    PollOption @relation(fields: [optionId], references: [id])
  createdAt DateTime   @default(now())

  @@unique([userId, pollId]) // one vote per user per poll
}

// ---------- Mice and Sensors (for DPI calculator) ----------
model Sensor {
  id      String  @id @default(cuid())
  key     String  @unique // e.g., "pixart-3395"
  name    String
  minDpi  Int
  maxDpi  Int
  step    Int      // DPI step granularity
  native  Int[]    // common native steps

  models  MouseModel[]
}

model MouseModel {
  id       String  @id @default(cuid())
  brand    String
  model    String
  sensorId String
  sensor   Sensor  @relation(fields: [sensorId], references: [id])

  @@index([brand, model])
}
=======
  id     String @id @default(cuid())
  value  Int
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  createdAt DateTime @default(now())
}
>>>>>>> origin/main
